# dim_x = 2
# dim_u = 1
# A = np.array([[1., 1.], [0., 1.]])
# B = np.array([[0.], [1.]])

# Q = np.eye(dim_x)
# R = 3
# K = dlqr(A, B, Q, R)[0]
# K = -K  # sign convention

# lb_x = [-3/4, -3/4.]
# ub_x = [3/4., 3/4.]
# lb_u = [-0.5]
# ub_u = [0.5]

# A_x, b_x = box_constraints(lb_x, ub_x)
# A_u, b_u = box_constraints(lb_u, ub_u)

# A_lqr = A_u @ K
# b_lqr = b_u

# A_con = np.vstack((A_lqr, A_x))
# b_con = np.hstack((b_lqr, b_x))

# A_inf_hist, b_inf_hist = find_lqr_invariant_set(A, B, K, lb_x, ub_x, lb_u, ub_u)
# _, A_inf, b_inf, _, _ = remove_redundant_constraints(A_inf_hist[-1], b_inf_hist[-1])

# print(f"A_inf:\n{A_inf}")
# print(f"b_inf:\n{b_inf}")



# A_inf_last = A_inf_hist[-1]
# b_inf_last = b_inf_hist[-1]

# fig, ax = plt.subplots()

# plot_polygon(A_inf_last, b_inf_last,'blue',ax)



# P = A_inf_hist[-1]
# gamma = b_inf_hist[-1]
# GH = sp.linalg.block_diag(A_x, A_u)
# G = GH[:, :dim_x]
# H = GH[:, dim_x:]

# psi = -np.hstack((b_x, b_u))

# A_X1, b_X1 = computeX1(G, H, psi, A, B, P, gamma)

# plot_polygon(A_X1, b_X1.squeeze(),'green',ax)


# N = 2       
# Xns = computeXn(A, B, K, N, lb_x, ub_x, lb_u, ub_u)
# for Xn in Xns:
#     plot_polygon(Xn[0], Xn[1].squeeze(),"red",ax)

#     # Find and plot all points where |Kx| >= 3
#     x_vals = np.linspace(lb_x[0], ub_x[0], 100)
#     y_vals = np.linspace(lb_x[1], ub_x[1], 100)
#     X, Y = np.meshgrid(x_vals, y_vals)
#     points = np.vstack([X.ravel(), Y.ravel()]).T

#     # Calculate |Kx| for each point
#     Kx_vals = np.abs(points @ K.T)

#     # Filter points where |Kx| >= 3
#     filtered_points = points[np.any(Kx_vals <= 0.05, axis=1)]

#     # Plot the filtered points
#     ax.plot(filtered_points[:, 0], filtered_points[:, 1], 'bo', markersize=5)


# print(P)

# plt.show()
